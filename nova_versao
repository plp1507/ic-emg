#include "BluetoothSerial.h"

#define NM 93
#define N_AMOSTRAS 100
#define REF 1820

const float alfa = (NM-1)/NM;

int contador = 0;

BluetoothSerial SerialBT;

//vetor de structs contendo pinos e medidas de todas as placas
typedef struct{
  int pino;
  float readVALUE;
  float mmex;
} Medidas;

//vetor de structs placa é inicializado com tamanho 6 (para 6 placas)
Medidas placa[6];

//funçao de inicializaçao dos pinos do microcontrolador, declaraçao das portas gpio a serem usadas
void initPINS(){
  placa[0].pino = 32;
  placa[1].pino = 33;
  placa[2].pino = 34;
  placa[3].pino = 35;
  placa[4].pino = 36;
  placa[5].pino = 39;
  
  for(int i = 0; i < 6; i++){
    pinMode(placa[i].pino, INPUT);
  }

  pinMode(25, OUTPUT);
  //gera a tensão de referência no pino GPIO25
  dacWrite(25, 128);
}

float medidas_tx[6];

void read_electr(){
  for(int i = 0; i < 6; i++){
    //retificação do sinal
    placa[i].readVALUE = analogRead(placa[i].pino) - REF;
    placa[i].readVALUE = abs(placa[i].readVALUE);

    //aplicação da média movel exponencial
    placa[i].mmex = (placa[i].readVALUE*(1-alfa)) + (placa[i].mmex*alfa);
  }
}

void setup(){
  initPINS();

  Serial.begin(115200);
  
  //nome do ESP32 para parear;
  SerialBT.begin("esp-protese");
}

void loop(){
  contador++;
  
  read_electr();
  
  if(contador == N_AMOSTRAS){
    for(int i = 0; i < 5; i++){
      SerialBT.print(placa[i].mmex);
      SerialBT.print(",");
    }
    SerialBT.println(placa[5].mmex);
    contador = 0;
  }
}
